// Copyright 2015 tsuru authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package saml

import (
	"bytes"
	"encoding/base64"
	"io"
	"os"
	"time"

	"github.com/tsuru/tsuru/auth"
	"gopkg.in/check.v1"
)

func (s *S) TestSamlMetadata(c *check.C) {
	metadata, err := Metadata()
	c.Assert(err, check.IsNil)
	c.Assert(metadata, check.NotNil)
}

func (s *S) TestSamlAuthLoginWithEmptyRequestId(c *check.C) {
	params := make(map[string]string)
	params["nononono"] = "fakevalue"
	scheme := SAMLAuthScheme{}
	scheme.Login(params)
	_, err := scheme.Login(params)
	c.Assert(err, check.Equals, ErrMissingRequestIdError)
}

func (s *S) TestSamlAuthLoginWithInvalidRequestId(c *check.C) {
	params := make(map[string]string)
	params["request_id"] = "0123456789"
	scheme := SAMLAuthScheme{}
	scheme.Login(params)
	_, err := scheme.Login(params)
	c.Assert(err, check.Equals, ErrRequestNotFound)
}

func (s *S) TestSamlAuthLoginWithExpiredRequest(c *check.C) {
	r := request{}
	r.ID = "_b533e78c-9c8f-49c6-4dc0-377dd47ed423"
	r.Creation = time.Now()
	r.Expires = time.Now().Add(1 * time.Second)
	r.Authed = false
	err := s.conn.SAMLRequests().Insert(r)
	c.Assert(err, check.IsNil)
	time.Sleep(2 * time.Second)
	// xml enconded with idp publickey
	xml := base64.StdEncoding.EncodeToString([]byte(readRespFromFile()))
	params := make(map[string]string)
	params["callback"] = "true"
	params["xml"] = xml
	scheme := SAMLAuthScheme{}
	_, err = scheme.Login(params)
	c.Assert(err, check.Equals, ErrRequestNotFound)
}

func readRespFromFile() string {
	buf := bytes.NewBuffer(nil)
	f, _ := os.Open("testdata/resp.xml") // Error handling elided for brevity.
	io.Copy(buf, f)                      // Error handling elided for brevity.
	f.Close()
	return string(buf.Bytes())
}

func (s *S) TestSamlCallbackDecodeXml(c *check.C) {
	//Create request into database
	r := request{}
	r.ID = "_a83cd40f-db9c-4366-6bc0-1171655daf5f"
	r.Creation = time.Now()
	r.Expires = time.Now().Add(3 * 60 * time.Second)
	r.Authed = false
	err := s.conn.SAMLRequests().Insert(r)
	c.Assert(err, check.IsNil)
	//xml encrypted with sp private key (priv.key) and base64 encoded
	b64Xml := ""
	scheme := SAMLAuthScheme{}
	//Parse xml
	response, err := scheme.Parse(b64Xml)
	c.Assert(err, check.IsNil)
	c.Assert(response, check.NotNil)
	requestId, err := getRequestIdFromResponse(response)
	c.Assert(requestId, check.Equals, r.ID)
	req := request{}
	err = req.getById(requestId)
	c.Assert(err, check.IsNil)
	c.Assert(req, check.NotNil)
	email, err := getUserIdentity(response)
	c.Assert(err, check.IsNil)
	c.Assert(email, check.Equals, "nuvem-teste@usp.br")
}

func (s *S) TestSamlAuthLoginValidRequestIdUserNotAuthed(c *check.C) {
	scheme := SAMLAuthScheme{}
	info, err := scheme.Info()
	params := make(map[string]string)
	params["request_id"] = info["request_id"].(string)
	_, err = scheme.Login(params)
	c.Assert(err, check.Equals, ErrRequestWaitingForCredentials)
}

func (s *S) TestSamlCallbackWithEmptyResponse(c *check.C) {
	params := make(map[string]string)
	params["callback"] = "true"
	scheme := SAMLAuthScheme{}
	scheme.Login(params)
	_, err := scheme.Login(params)
	c.Assert(err, check.Equals, ErrMissingFormValueError)
}

func (s *S) TestSamlCallbackWithInvalidResponse(c *check.C) {
	params := make(map[string]string)
	params["callback"] = "true"
	params["xml"] = "<? invalid xml response from idp ?>"
	scheme := SAMLAuthScheme{}
	scheme.Login(params)
	_, err := scheme.Login(params)
	c.Assert(err, check.Equals, ErrParseResponseError)
}

func (s *S) TestNewTokenReturnsErrorWhenUserIsNil(c *check.C) {
	t, err := newUserToken(nil)
	c.Assert(t, check.IsNil)
	c.Assert(err, check.NotNil)
	c.Assert(err, check.ErrorMatches, "^User is nil$")
}

func (s *S) TestSamlAuthName(c *check.C) {
	scheme := SAMLAuthScheme{}
	name := scheme.Name()
	c.Assert(name, check.Equals, "saml")
}

func (s *S) TestSamlAuthInfo(c *check.C) {
	scheme := SAMLAuthScheme{}
	info, err := scheme.Info()
	c.Assert(err, check.IsNil)
	c.Assert(info["request_id"], check.NotNil)
	c.Assert(info["saml_request"], check.NotNil)
	c.Assert(info["url"], check.NotNil)
	c.Assert(info["request_timeout"], check.Equals, "60")
}

func (s *S) TestSamlAuth(c *check.C) {
	user := auth.User{Email: "x@x.com"}
	token, _ := createToken(&user)
	scheme := SAMLAuthScheme{}
	strtoken, err := scheme.Auth("bearer " + token.GetValue())
	c.Assert(err, check.IsNil)
	c.Assert(token.GetValue(), check.Equals, strtoken.GetValue())
}

func (s *S) TestSamlParseXml(c *check.C) {
	xml := base64.StdEncoding.EncodeToString([]byte(readRespFromFile()))
	scheme := SAMLAuthScheme{}
	response, err := scheme.Parse(xml)
	c.Assert(err, check.IsNil)
	c.Assert(response, check.NotNil)
}

func (s *S) TestSamlAppLogin(c *check.C) {
	scheme := SAMLAuthScheme{}
	token, err := scheme.AppLogin("myApp")
	c.Assert(err, check.IsNil)
	c.Assert(token.IsAppToken(), check.Equals, true)
	c.Assert(token.GetAppName(), check.Equals, "myApp")
}

func (s *S) TestSamlAuthWithAppToken(c *check.C) {
	scheme := SAMLAuthScheme{}
	appToken, err := scheme.AppLogin("myApp")
	c.Assert(err, check.IsNil)
	token, err := scheme.Auth("bearer " + appToken.GetValue())
	c.Assert(err, check.IsNil)
	c.Assert(len(s.reqs), check.Equals, 0)
	c.Assert(token.IsAppToken(), check.Equals, true)
	c.Assert(token.GetAppName(), check.Equals, "myApp")
	c.Assert(token.GetValue(), check.Equals, appToken.GetValue())
}

func (s *S) TestSamlCreate(c *check.C) {
	scheme := SAMLAuthScheme{}
	user := auth.User{Email: "x@x.com"}
	_, err := scheme.Create(&user)
	c.Assert(err, check.IsNil)
	dbUser, err := auth.GetUserByEmail(user.Email)
	c.Assert(err, check.IsNil)
	c.Assert(dbUser.Email, check.Equals, user.Email)
	c.Assert(dbUser.Password, check.Equals, "")
}
