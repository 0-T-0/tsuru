=======================
tsr 0.9.0 release notes
=======================

Welcome to tsr 0.9.0!

These release notes cover the `new features`_, `bug fixes`_, `backward
incompatible changes`_, `general improvements`_ and `changes in the API`_
you'll want to be aware of when upgrading from tsr 0.8.0 or older versions.

.. _`new features`: `What's new in tsr 0.9.0`_
.. _`general improvements`: `Other improvements in tsr 0.9.0`_
.. _`changes in the API`: `API changes`_

What's new in tsr 0.9.0
=======================

* Now tsuru users can generate an API key to that enables authentication that
  don't require interaction and never expires. Users can generate a new API key
  at any time using the command ``tsuru token-regenerate`` to replace the old
  one. To view the current key that you own, just use the command ``tsuru
  token-show``.

* It's possible to use templates to create machines in the IaaS provider with
  ``docker-node-add``. See :ref:`machine-template-add
  <tsuru_admin_machine_template_add_cmd>` command for more details.

Bug fixes
=========

* app: SetEnvs not return error in apps with no units (issue `#954
  <https://github.com/tsuru/tsuru/issues/954>`_).
* iaas/ec2: fixed panic after machine creation timeout.

Other improvements in tsr 0.9.0
===============================

* Improvements to EC2 IaaS provider, it now accepts user-data config through
  ``iaas:ec2:user-data`` and a timeout for machine creation with
  ``iaas:ec2:wait-timeout`` config.
* A new debug route is available in the API: ``/debug/goroutines``. It can only be
  hit with admin credentials and will dump a trace of each running goroutine.

Backward incompatible changes
=============================

API changes
===========

For more details on the API, please refer to the :doc:`tsuru API documentation
</reference/api>`.

* ``/users/keys``: in previous versions of the API, this endpoint was used for
  adding and removing keys from the user account. Now it also lists the keys
  registered in the account of the user. Here is a summary of the behavior of
  this endpoint:

    - ``GET``: return the list of keys registered in the user account
    - ``POST``: add a new SSH key to the user account
    - ``DELETE``: remove a SSH key from the user account

  For the two last kind of requests, the user is now able to specify the name
  of the key, as well as the content.
